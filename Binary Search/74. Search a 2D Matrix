Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Java:
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length;
        
        int left = 0, right = m * n - 1;
        while (left + 1 < right) {
            int pivot = left + (right - left) / 2;
            
            int[] cords = getCoordinate(pivot, n);
            int x = cords[0], y = cords[1];
            
            if (matrix[x][y] == target) {
                return true;
            } else if (matrix[x][y] < target) {
                left = pivot;
            }else{
                right = pivot;
            }
        }
        
        int[] cords1 = getCoordinate(left, n);
        int[] cords2 = getCoordinate(right, n);
        int x1 = cords1[0], y1 = cords1[1];
        int x2 = cords2[0], y2 = cords2[1];
        
        if (matrix[x1][y1] == target || matrix[x2][y2] == target) {
            return true;
        }else{
            return false;
        }
    }
    
    public int[] getCoordinate(int pivot, int n) {
        
        int x = pivot / n;
        int y = pivot % n;
        
        return new int[]{x, y};
    }
}



class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        m, n = len(matrix), len(matrix[0])
        left, right = 0, m * n - 1
        
        while left + 1 < right:
            mid = (left + right) // 2
            i, j = mid // n, mid % n
            
            if matrix[i][j] <= target:
                left = mid
            else:
                right = mid
                
        i_left, j_left = left // n, left % n
        i_right, j_right = right // n, right % n
        

        if matrix[i_left][j_left] == target or matrix[i_right][j_right] == target:
            return True
        
        return False
