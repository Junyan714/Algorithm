There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

Java:
class Solution {
    public boolean search(int[] nums, int target) {
        int pivot, left = 0, right = nums.length - 1;
        
        while (left + 1 < right) {
            
            while (left + 1 < right && nums[left] == nums[left + 1]) {
                left ++;
            }
            while (left + 1 < right && nums[right] == nums[right - 1]) {
                right --;
            }
            
            pivot = left + (right - left) / 2;
            
            if (nums[pivot] >= nums[left]) {
                if (nums[pivot] > target && target >= nums[left]) {
                    right = pivot;
                }else {
                    left = pivot;
                }
            }else {
                if (nums[pivot] < target && target <= nums[right]) {
                    left = pivot;
                }else {
                    right = pivot;
                }
            }
        }
        
        if (nums[left] == target || nums[right] == target) {
            return true;
        }else {
            return false;
        }
    }
}






class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        left, right = 0, len(nums) - 1
        
        while left + 1 < right:
            
            while left + 1 < right and nums[left + 1] == nums[left]:
                left += 1
            while left + 1 < right and nums[right - 1] == nums[right]:
                right -= 1
                    
            
            mid = (left + right) // 2
            if nums[mid] == target:
                return True
            
            if nums[mid] >= nums[left]:
                if nums[left] <= target < nums[mid]:
                    right = mid
                else:
                    left = mid
            
            else:
                if nums[right] >= target > nums[mid]:
                    left = mid
                else:
                    right = mid
                    
        if nums[left] == target or nums[right] == target:
            return True
        
        else:
            return False
                
