In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].

A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.


import collections
class Solution:
    def minKnightMoves(self, x: int, y: int) -> int:
        DIRECTIONS = [(1,2),(2,1),(-1,2),(2,-1),(1,-2),(-2,1),(-1,-2),(-2,-1)]
        queue = collections.deque([(0, 0)])
        visited = set()
        visited.add((0, 0))
        
        steps = 0
        while queue:
            for _ in range(len(queue)):
                node = queue.popleft()
                
                if node[0] == x and node[1] == y:
                    return steps
                
                for i, j in DIRECTIONS:
                    newX, newY = node[0] + i, node[1] + j
                    
                    if (newX, newY) not in visited:
                        visited.add((newX, newY))
                        queue.append((newX, newY))
                        
            steps += 1
            
        return steps
