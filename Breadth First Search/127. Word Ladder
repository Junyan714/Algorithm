import collections

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        words = set(wordList)
        visited = set(beginWord)
        queue = collections.deque([beginWord])
        
        steps = 1
        while queue:
            for _ in range(len(queue)):
                node = queue.popleft()
                if node == endWord:
                    return steps
                
                for nextWord in self.findWords(node, words):
        
                    if nextWord not in visited:
                        visited.add(nextWord)
                        queue.append(nextWord)
            
            steps += 1
                        
        return 0
    
    def findWords(self, word, words):
        
        res = []
        for i in range(len(word)):
            for c in "abcdefghijklmnopqrstuvwxyz":
                
                newWord = word[:i] + c + word[i+1:]
                if newWord in words:
                    res.append(newWord)
                    
        return res
